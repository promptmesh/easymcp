{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasyMCP","text":"<p>EasyMCP is a modern Python implementation of the Model Context Protocol (MCP), designed to manage and interact with distributed AI servers, tools, and resources using a consistent and extensible API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83c\udf10 Multi-server orchestration via <code>ClientManager</code></li> <li>\ud83e\udde0 Built-in support for tools, resources, and prompts</li> <li>\ud83d\udd04 Automatic cache invalidation via push notifications</li> <li>\ud83e\uddea Async-native, with support for subprocesses, Docker, SSE transports</li> <li>\ud83d\udd0c Easy integration with search engines like Meilisearch</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>uv add easymcp\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>from easymcp.client.ClientManager import ClientManager\nfrom easymcp.client.transports.stdio import StdioServerParameters\n\nmgr = ClientManager()\n\nservers = {\n    \"timeserver\": StdioServerParameters(command=\"uvx\", args=[\"mcp-timeserver\"])\n}\n\nawait mgr.init(servers)\ntools = await mgr.list_tools()\n</code></pre> <p>Check out Usage to learn more.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#managing-servers","title":"Managing Servers","text":"<p>Use <code>ClientManager</code> to start and stop multiple MCP servers.</p> <pre><code>from easymcp.client.ClientManager import ClientManager\nfrom easymcp.client.transports.stdio import StdioServerParameters\n\nmgr = ClientManager()\n\nawait mgr.init({\n    \"timeserver\": StdioServerParameters(command=\"uvx\", args=[\"mcp-timeserver\"])\n})\n</code></pre>"},{"location":"usage/#listing-calling-tools","title":"Listing &amp; Calling Tools","text":"<pre><code>tools = await mgr.list_tools()\nresult = await mgr.call_tool(\"timeserver.get-current-time\", {})\n</code></pre>"},{"location":"usage/#reading-resources","title":"Reading Resources","text":"<pre><code>resources = await mgr.list_resources()\ndata = await mgr.read_resource(\"mcp-timeserver+datetime://UTC/now\")\n</code></pre>"},{"location":"usage/#using-prompts","title":"Using Prompts","text":"<pre><code>prompts = await mgr.list_prompts()\nresponse = await mgr.read_prompt(\"wa\", {\"query\": \"pi\"})\n</code></pre>"}]}